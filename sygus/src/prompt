You are an expert in program synthesis.
You are tasked with solving a Syntax-Guided Synthesis (SyGuS) problem.
Your goal is to output a function that should produce outputs that satisfy
a series of constraints when given specific inputs. Write the simplest function
possible that satisfies the constraints.

Question:
(set-logic BV)
(synth-fun inv ((s (BitVec 4)) (t (BitVec 4))) (BitVec 4))
(declare-var s (BitVec 4))
(declare-var t (BitVec 4))
(define-fun udivtotal ((a (BitVec 4)) (b (BitVec 4))) (BitVec 4)
(ite (= b #x0) #xF (bvudiv a b)))
(define-fun uremtotal ((a (BitVec 4)) (b (BitVec 4))) (BitVec 4)
(ite (= b #x0) a (bvurem a b)))
(define-fun min () (BitVec 4)
(bvnot (bvlshr (bvnot #x0) #x1)))
(define-fun max () (BitVec 4)
(bvnot min))
(define-fun l ((s (BitVec 4)) (t (BitVec 4))) Bool
(bvsle (bvlshr s (inv s t)) t))
(define-fun SC ((s (BitVec 4)) (t (BitVec 4))) Bool
(or (bvult t min) (bvsge t s)))
(constraint (=> (SC s t) (l s t)))
(check-synth)
Solution:
(define-fun inv ((s (BitVec 4)) (t (BitVec 4))) (BitVec 4) (bvnot (bvor s #b0111)))

Question:
(set-logic SLIA)
 
(synth-fun f ((firstname String) (lastname String)) String
    ((Start String (ntString))
     (ntString String (firstname lastname "," " " "."
                       (str.++ ntString ntString)
                       (str.replace ntString ntString ntString)
                       (str.at ntString ntInt)
                       (int.to.str ntInt)
                       (str.substr ntString ntInt ntInt)))
      (ntInt Int (0 1 2
                  (+ ntInt ntInt)
                  (- ntInt ntInt)
                  (str.len ntString)
                  (str.to.int ntString)
                  (str.indexof ntString ntString ntInt)))
      (ntBool Bool (true false
                    (str.prefixof ntString ntString)
                    (str.suffixof ntString ntString)
                    (str.contains ntString ntString)))))


(declare-var firstname String)
(declare-var lastname String)

(constraint (= (f "Launa" "Withers") "Withers, L."))
(constraint (= (f "Lakenya" "Edison") "Edison, L."))
(constraint (= (f "Brendan" "Hage") "Hage, B."))
(constraint (= (f "Bradford" "Lango") "Lango, B."))
(constraint (= (f "Rudolf" "Akiyama") "Akiyama, R."))
 
(check-synth)
Solution:
(define-fun f ((firstname String) (lastname String)) String (str.++ (str.++ lastname ", ") (str.substr firstname 0 1) "."))
